name: Build GraphScope

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'

jobs:
  build-gae:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container:
      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:latest
      options:
        --shm-size 4096m
    strategy:
      matrix:
        experimental: [ON, OFF]

    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2

    - name: Cpp Format And Lint Check
      run: |
        # install clang-format
        if [ ! -f /usr/bin/clang-format ]; then
            curl -L https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-8_linux-amd64 --output /usr/bin/clang-format
            chmod +x /usr/bin/clang-format
        fi
        # run clang-format
        cd analytical_engine/
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.h" | xargs clang-format -i --style=file
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.cc" | xargs clang-format -i --style=file
        # validate format
        function prepend() { while read line; do echo "${1}${line}"; done; }
        GIT_DIFF=$(git diff --ignore-submodules)
        if [[ -n $GIT_DIFF ]]; then
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            echo "| clang-format failures found!"
            echo "|"
            echo "$GIT_DIFF" | prepend "| "
            echo "|"
            echo "| Run: "
            echo "|"
            echo "|    make gsa_clformat"
            echo "|"
            echo "| to fix this error."
            echo "|"
            echo "| Ensure you are working with clang-format-8, which can be obtained from"
            echo "|"
            echo "|    https://github.com/muttleyxd/clang-tools-static-binaries/releases"
            echo "|"
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            exit -1
        fi
        python3 ./misc/cpplint.py --recursive ./apps ./benchmarks ./core ./frame ./test

    - name: Python Format and Lint Check
      run: |
        echo "Checking formatting for $GITHUB_REPOSITORY"
        pip3 install black==20.8b1 flake8==3.8.4 isort==5.5.4
        pushd python
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .
        popd
        pushd coordinator
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .

    - name: Build
      run: |
        strip /opt/graphscope/lib/* || true
        strip /opt/graphscope/lib64/* || true

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        cd analytical_engine
        mkdir build
        cd build
        cmake .. -DCMAKE_PREFIX_PATH=/opt/graphscope \
                 -DCMAKE_INSTALL_PREFIX=/opt/graphscope \
                 -DEXPERIMENTAL_ON=${{ matrix.experimental }}
        make -j`nproc`
        make install
        cd ${GITHUB_WORKSPACE}
        cp k8s/kube_ssh /opt/graphscope/bin/kube_ssh
        cp k8s/pre_stop.py /opt/graphscope/bin/pre_stop.py
        tar -cf gae.tar /opt/graphscope

    - name: Run GAE Tests
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        export PATH=${PATH}:/opt/graphscope/bin/
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR}

        cd analytical_engine/build
        ../test/app_tests.sh --test_dir ${GITHUB_WORKSPACE}/gstest

    - name: Upload Artifact
      if: matrix.experimental == 'ON'
      uses: actions/upload-artifact@v2
      with:
        name: gae-${{ github.sha }}
        path: gae.tar
        retention-days: 5

  build-gie:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:latest
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

        wget --no-verbose https://golang.org/dl/go1.15.5.linux-amd64.tar.gz
        tar -C /usr/local -xzf go1.15.5.linux-amd64.tar.gz
        curl -sf -L https://static.rust-lang.org/rustup.sh | sh -s -- -y --profile minimal --default-toolchain 1.48.0
        echo "source ~/.cargo/env" >> ~/.bashrc

    - uses: actions/checkout@v2.3.2

    - name: Build
      run: |
        export PATH=${PATH}:/usr/local/go/bin
        export CMAKE_PREFIX_PATH=/opt/graphscope
        export LIBRARY_PATH=$LIBRARY_PATH:/opt/graphscope/lib
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        source ~/.bashrc

        cd interactive_engine/src/executor
        ./exec.sh cargo build --all --release
        cd ${GITHUB_WORKSPACE}
        tar -cf gie.tar interactive_engine/src/executor/target/release/executor \
                        interactive_engine/src/executor/store/log4rs.yml \
                        interactive_engine/deploy/docker/dockerfile

    - uses: actions/upload-artifact@v2
      with:
        name: gie-${{ github.sha }}
        path: gie.tar
        retention-days: 5

  build-gle:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:latest
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2
      with:
        submodules: true
    - name: Build
      run: |
        strip /opt/graphscope/lib/* || true
        strip /opt/graphscope/lib64/* || true
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        export PATH=${PATH}:/opt/rh/devtoolset-7/root/usr/bin
        cd learning_engine/graph-learn
        git submodule update --init third_party/pybind11
        mkdir cmake-build
        cd cmake-build
        cmake -DCMAKE_PREFIX_PATH=/opt/graphscope \
              -DCMAKE_INSTALL_PREFIX=/opt/graphscope \
              -DWITH_VINEYARD=ON \
              -DTESTING=OFF ..
        make graphlearn_shared install -j

    - name: build wheel
      run: |
        sed -i 's/p.error/logger.warning/g' /usr/local/lib/python3.6/site-packages/auditwheel/main_repair.py

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        export WITH_LEARNING_ENGINE=ON
        pushd python
        pip3 install -U setuptools
        pip3 install -r requirements.txt -r requirements-dev.txt
        python3 setup.py bdist_wheel
        pushd ./dist
        auditwheel repair --plat=manylinux2014_x86_64 ./*.whl
        cp ./wheelhouse/* /opt/graphscope/dist/
        popd
        popd
        pushd coordinator
        pip3 install -r requirements.txt -r requirements-dev.txt
        python3 setup.py bdist_wheel
        cp ./dist/* /opt/graphscope/dist/

        cd ${GITHUB_WORKSPACE}
        tar -cf gle.tar /opt/graphscope

    - uses: actions/upload-artifact@v2
      with:
        name: gle-${{ github.sha }}
        path: gle.tar
        retention-days: 5

  build-manager:
    runs-on: ubuntu-20.04
    env:
      profile: release
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-runtime:latest

    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2

    - name: Build
      run: |
        mkdir /root/.m2
        mv interactive_engine/deploy/docker/dockerfile/maven.settings.xml /root/.m2/settings.xml
        cd interactive_engine
        mvn clean package -DskipTests -Pjava-release --quiet
        cd ${GITHUB_WORKSPACE}
        tar -cf manager.tar interactive_engine/src/assembly/target/0.0.1-SNAPSHOT.tar.gz \
                            interactive_engine/src/instance-manager/target/0.0.1-SNAPSHOT.tar.gz \
                            interactive_engine/deploy/docker/dockerfile

    - uses: actions/upload-artifact@v2
      with:
        name: manager-${{ github.sha }}
        path: manager.tar
        retention-days: 5
